name: DigitalOcean Staging

on:
  push:
    branches:
      - develop

jobs:
  build:
    name: Build
    runs-on: self-hosted

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Create .env
        run: |
          echo 'RAILS_ENV=${{ secrets.RAILS_ENV }}' >> .env
          echo 'NODE_ENV=${{ secrets.NODE_ENV }}' >> .env
          echo 'RAILS_STAGING=${{ secrets.RAILS_STAGING }}' >> .env
          echo 'COMPOSE_PROFILES=${{ secrets.COMPOSE_PROFILES }}' >> .env
          echo 'SECRET_KEY_BASE=${{ secrets.SECRET_KEY_BASE }}' >> .env
          echo 'POSTGRES_USER=${{ secrets.POSTGRES_USER }}' >> .env
          echo 'POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}' >> .env
          echo 'RAILS_SERVE_STATIC_FILES=${{ secrets.RAILS_SERVE_STATIC_FILES }}' >> .env
          echo 'RAILS_ADMIN_EMAIL=${{ secrets.RAILS_ADMIN_EMAIL }}' >> .env
          echo 'RAILS_ADMIN_PASSWORD=${{ secrets.RAILS_ADMIN_PASSWORD }}' >> .env
          echo 'RAILS_ADMIN_FIRST_NAME=${{ secrets.RAILS_ADMIN_FIRST_NAME }}' >> .env
          echo 'RAILS_ADMIN_LAST_NAME=${{ secrets.RAILS_ADMIN_LAST_NAME }}' >> .env

      - name: Upload .env as an artifact
        uses: actions/upload-artifact@v3
        with:
          name: .env
          path: .env

      - name: Build Docker Compose
        run: docker compose build

      - name: Run web Container to populate Volume and immediately remove it
        run: docker compose run --rm web true

      - name: Upload public as an artifact
        uses: actions/upload-artifact@v3
        with:
          name: public
          path: public

  test:
    name: Test
    runs-on: self-hosted
    needs: build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download .env artifact
        uses: actions/download-artifact@v3
        with:
          name: .env

      - name: Download public artifact
        uses: actions/download-artifact@v3
        with:
          name: public

      - name: Start Postgres
        run: docker compose start postgres

      - name: Create a test database
        run: docker compose run --rm -e RAILS_ENV=test web bundle exec rails db:create db:schema:load

      - name: Run RSpec Tests
        run: docker compose run test

  deploy:
    name: Deploy
    runs-on: self-hosted
    needs: test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download .env artifact
        uses: actions/download-artifact@v3
        with:
          name: .env

      - name: Download public artifact
        uses: actions/download-artifact@v3
        with:
          name: public

      - name: Run Docker Compose
        run: docker compose up -d

      - name: Setup Postgres Production database
        run: docker compose exec -e DISABLE_DATABASE_ENVIRONMENT_CHECK=1 web bundle exec rails db:setup
